...........................................................EXP.5 16QAM...............................
clc
close all
N=100;
t=linspace(0,1,N);
numPulses=3;
V=zeros(numPulses,N);
V(1,1:floor(N/3))=1;
V(2,floor(N/3)+1:floor(2*N/3))=1;
V(3,floor(2*N/3)+1:N)=1;
U=zeros(numPulses,N);
for i=1:numPulses
u=V(i,:);
for j=1:i-1
projection=(dot(U(j,:),u)/dot(U(j,:),U(j,:)))*U(j,:);
u=u-projection;
end
U(i,:)=u;
end
U_norm=zeros(numPulses,N);
for i=1:numPulses
U_norm(i,:)=U(i,:)/norm(U(i,:));
figure;
subplot(2,1,1);
hold on;
for i=1:numPulses
plot(t,V(i,:),'LineWidth',2);
end
end
title('Original Square Pulses');
xlabel('t');
ylabel('Amplitude');
legend('Pulse 1','Pulse 2','Pulse 3');
grid on;
subplot(2,1,2);
hold on;
for i=1:numPulses
plot(t,U_norm(i,:),'LineWidth',2);
end
title('Orthonormal Functions');
xlabel('t');
ylabel('Amplitude');
legend('Orthogonal 1','orthogonal 2','orthogonal 3');
grid on;


.................................................EXP06 GRAMSCHMITH........................................................
clc
close all
N=100;
t=linspace(0,1,N);
numPulses=3;
V=zeros(numPulses,N);
V(1,1:floor(N/3))=1;
V(2,floor(N/3)+1:floor(2*N/3))=1;
V(3,floor(2*N/3)+1:N)=1;
U=zeros(numPulses,N);
for i=1:numPulses
u=V(i,:);
for j=1:i-1
projection=(dot(U(j,:),u)/dot(U(j,:),U(j,:)))*U(j,:);
u=u-projection;
end
U(i,:)=u;
end
U_norm=zeros(numPulses,N);
for i=1:numPulses
U_norm(i,:)=U(i,:)/norm(U(i,:));
figure;
subplot(2,1,1);
hold on;
for i=1:numPulses
plot(t,V(i,:),'LineWidth',2);
end
end
title('Original Square Pulses');
xlabel('t');
ylabel('Amplitude');
legend('Pulse 1','Pulse 2','Pulse 3');
grid on;
subplot(2,1,2);
hold on;
for i=1:numPulses
plot(t,U_norm(i,:),'LineWidth',2);
end
title('Orthonormal Functions');
xlabel('t');
ylabel('Amplitude');
legend('Orthogonal 1','orthogonal 2','orthogonal 3');
grid on;
.....................................EXP:7 MATCHED FILTER.......................................
clear;
clc;
closeall;

N = 1000; 
SNR_dB = 0:2:20;
M = 2; 
data = rand(1, N) > 0.5;
tx_signal = 2*data - 1; 
BER = zeros(1, length(SNR_dB));
foridx = 1:length(SNR_dB)
SNR_linear = 10^(SNR_dB(idx)/10);
noise_power = 1 / (2 * SNR_linear); 
noise = sqrt(noise_power) * randn(1, N); 
rx_signal = tx_signal + noise; 
matched_filter_output = rx_signal; 
detected_data = matched_filter_output> 0; 
BER(idx) = sum(detected_data ~= data) / N; 
figure;
semilogy(SNR_dB, BER, 'b-o', 'LineWidth', 2);
xlabel('SNR (dB)');
ylabel('Bit Error Rate (BER)');
title('BER vs SNR for BPSK with Matched Filter in AWGN Channel');
gridon;
disp('SNR (dB) vs BER:');
disp([SNR_dB; BER]);
.............................EXP:8 QPSK..................................
close all
clc
M = 4; 
k = log2(M); 
nBits = 1000; 
EbNo = 10;
bits = round(rand(nBits, 1)); 
symbols = zeros(nBits/k, 1);
for i = 1:2:nBits
bitPair = bits(i:i+1);
if bitPair == [0 0]'
symbols((i+1)/2) = 1 + 1i; % 00 -> 1+j
elseif bitPair == [0 1]'
symbols((i+1)/2) = 1 - 1i; % 01 -> 1-j
elseif bitPair == [1 0]'
symbols((i+1)/2) = -1 + 1i; % 10 -> -1+j

elseif bitPair == [1 1]'
symbols((i+1)/2) = -1 - 1i; % 11 -> -1-j
end
end
symbols = symbols / sqrt(2);
rxSymbols = awgn(symbols, EbNo, 'measured');
figure;
scatter(real(rxSymbols), imag(rxSymbols), 'r*');
title('QPSK Signal Constellation');
xlabel('In-phase (I)');
ylabel('Quadrature (Q)');
grid on;
axis([-1.5 1.5 -1.5 1.5]);
............................EXP:9HUFFMAN.........................................
close all
clc
M = 4;
k = log2(M); % Number of bits per symbol
nBits = 1000; % Number of bits to be transmitted
EbNo = 10; % Eb/No ratio in dB (energy per bit to noise power spectral density
ratio)

% Generate random bits
bits = round(rand(nBits, 1)); % Generate random bits (0 or 1)

% QPSK Mapping (Gray coding)
% Map bits to QPSK symbols (00 -> 1+j, 01 -> 1-j, 10 -> -1+j, 11 -> -1-j)
symbols = zeros(nBits/k, 1);
for i = 1:2:nBits
% Extract 2 bits at a time
bitPair = bits(i:i+1);

% Map to corresponding QPSK symbol
if bitPair == [0 0]'
symbols((i+1)/2) = 1 + 1i; % 00 -> 1+j
elseif bitPair == [0 1]'
symbols((i+1)/2) = 1 - 1i; % 01 -> 1-j
elseif bitPair == [1 0]'
symbols((i+1)/2) = -1 + 1i; % 10 -> -1+j

elseif bitPair == [1 1]'
symbols((i+1)/2) = -1 - 1i; % 11 -> -1-j
end
end

% Normalize the signal (optional)
symbols = symbols / sqrt(2);

% Add noise (AWGN)
rxSymbols = awgn(symbols, EbNo, 'measured');

% Plot Constellation Diagram
figure;
scatter(real(rxSymbols), imag(rxSymbols), 'r*');
title('QPSK Signal Constellation');
xlabel('In-phase (I)');
ylabel('Quadrature (Q)');
grid on;
axis([-1.5 1.5 -1.5 1.5]);

..................................EXP:10HAMMING CODE..........................
% Hamming (7,4) Code for Encoding and Decoding
close all
clear all
clc
% Input 4-bit data to encode
data = [1 0 1 1]; % Example binary data (4 bits)

% Step 1: Encoding
% Generate parity bits for the data
p1 = xor(xor(data(1), data(2)), data(4));
p2 = xor(xor(data(1), data(3)), data(4));
p3 = xor(xor(data(2), data(3)), data(4));

% Encoded 7-bit data (parity bits and data bits combined)
encodedData = [p1 p2 data(1) p3 data(2) data(3) data(4)];

disp('Encoded Data (7-bit Hamming Code):');
disp(encodedData);

% Step 2: Introduce an Error (optional - for testing)
% Uncomment the line below to introduce a single-bit error for testing
% encodedData(3) = xor(encodedData(3), 1); % Flips the third bit

% Step 3: Decoding
% Calculate syndrome bits to detect errors
s1 = xor(xor(encodedData(1), encodedData(3)), xor(encodedData(5), encodedData(7)));
s2 = xor(xor(encodedData(2), encodedData(3)), xor(encodedData(6), encodedData(7)));

s3 = xor(xor(encodedData(4), encodedData(5)), xor(encodedData(6), encodedData(7)));

% Convert syndrome to a decimal to identify the error position (if any)
errorPosition = s1 * 1 + s2 * 2 + s3 * 4;

% Error Correction
if errorPosition > 0
disp(['Error detected at position: ', num2str(errorPosition)]);
% Correct the error by flipping the erroneous bit
encodedData(errorPosition) = xor(encodedData(errorPosition), 1);
else
disp('No error detected.');
end

% Extract the original 4-bit data after correction
decodedData = [encodedData(3), encodedData(5), encodedData(6), encodedData(7)];

disp('Decoded Data (4-bit original data):');
disp(decodedData);




.............................................EXP:11.......................................
% CRC-CCITT Code Generation and Verification in MATLAB
close all
clc
% Input data in binary (as a row vector)
data = [1 0 1 1 0 0 1 1]; % Example binary data

% CRC-CCITT Polynomial (0x1021)
generator = [1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1]; % CRC-CCITT polynomial in binary

% Step 1: Append 16 zeros (for 16-bit CRC)
dataWithZeros = [data, zeros(1, length(generator) - 1)];

% Step 2: Perform Division to obtain the CRC
remainder = dataWithZeros; % Initialize remainder
for i = 1:length(data)
if remainder(i) == 1 % Only divide if leading bit is 1
% XOR with generator polynomial shifted to the current position
remainder(i:i+length(generator)-1) = xor(remainder(i:i+length(generator)-1),
generator);
end
end
crc = remainder(end-length(generator)+2:end); % Last 16 bits are the CRC
% Step 3: Append CRC to original data
transmittedData = [data, crc];
disp('Transmitted Data (Data + CRC):');
disp(transmittedData);
% Verification: Case i) Without Error
% Step 4: Verify CRC by performing division on received data
receivedData = transmittedData; % Assume no error during transmission
remainderCheck = receivedData;
for i = 1:length(data)
if remainderCheck(i) == 1
remainderCheck(i:i+length(generator)-1) =
xor(remainderCheck(i:i+length(generator)-1), generator);
end
end
if all(remainderCheck(end-length(generator)+2:end) == 0)
disp('Verification (Without Error): No error detected.');
else
disp('Verification (Without Error): Error detected.');
end
% Verification: Case ii) With Error
% Introduce an error in the transmitted data (flip one bit)
receivedDataWithError = transmittedData;
receivedDataWithError(5) = xor(receivedDataWithError(5), 1); % Flip the 5th bit for
testing
remainderCheckError = receivedDataWithError;
for i = 1:length(data)
if remainderCheckError(i) == 1
remainderCheckError(i:i+length(generator)-1) =
xor(remainderCheckError(i:i+length(generator)-1), generator);
end
end
if all(remainderCheckError(end-length(generator)+2:end) == 0)
disp('Verification (With Error): No error detected.');
else
disp('Verification (With Error): Error detected.');
end